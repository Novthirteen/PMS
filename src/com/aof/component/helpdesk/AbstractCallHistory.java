/*
 * WARNING: DO NOT EDIT THIS FILE. This is a generated file that is synchronized
 * by MyEclipse Hibernate tool integration.
 *
 * Created Fri Nov 12 12:39:38 CST 2004 by MyEclipse Hibernate Tool.
 */
package com.aof.component.helpdesk;

import java.io.Serializable;
import com.aof.component.domain.party.*;
import com.aof.component.helpdesk.servicelevel.*;

/**
 * A class that represents a row in the CM_History table. 
 * You can customize the behavior of this class by editing the class, {@link CallHistory()}.
 * WARNING: DO NOT EDIT THIS FILE. This is a generated file that is synchronized * by MyEclipse Hibernate tool integration.
 */
public abstract class AbstractCallHistory 
    implements Serializable
{
    /** The cached hash code value for this instance.  Settting to 0 triggers re-calculation. */
    private int hashValue = 0;

    /** The composite primary key value. */
    private java.lang.Integer callHistoryID;

    /** The value of the call association. */
    private CallMaster call;

    /** The value of the party association. */
    private Party party;

    /** The value of the userLogin association. */
    private UserLogin newUser;

    /** The value of the userLogin1 association. */
    private UserLogin oldUser;
    
    

    /** The value of the simple desc property. */
    private java.lang.String desc;

    
    private ModifyLog modifyLog=new ModifyLog();

    /** The value of the simple oldParthId property. */
    private Party oldParty;
    
    /** The value of the simple oldParthId property. */
    private Party newParty;

    /** The value of the simple oldRequestType property. */
    private SLACategory oldRequestType;

    /** The value of the simple newReqeustType property. */
    private SLACategory newReqeustType;

    /** The value of the simple oldPriority property. */
    private SLAPriority oldPriority;

    /** The value of the simple newPriority property. */
    private SLAPriority newPriority;

    
	/**
	 * @return Returns the call.
	 */
	public CallMaster getCall() {
		return call;
	}
	/**
	 * @param call The call to set.
	 */
	public void setCall(CallMaster call) {
		this.call = call;
	}
	/**
	 * @return Returns the callHistoryID.
	 */
	public java.lang.Integer getCallHistoryID() {
		return callHistoryID;
	}
	/**
	 * @param callHistoryID The callHistoryID to set.
	 */
	public void setCallHistoryID(java.lang.Integer callHistoryID) {
		this.callHistoryID = callHistoryID;
	}
	
	/**
	 * @return Returns the modifyLog.
	 */
	public ModifyLog getModifyLog() {
		return modifyLog;
	}
	/**
	 * @param modifyLog The modifyLog to set.
	 */
	public void setModifyLog(ModifyLog modifyLog) {
		this.modifyLog = modifyLog;
	}
	/**
	 * @return Returns the desc.
	 */
	public java.lang.String getDesc() {
		return desc;
	}
	/**
	 * @param desc The desc to set.
	 */
	public void setDesc(java.lang.String desc) {
		this.desc = desc;
	}
	/**
	 * @return Returns the hashValue.
	 */
	public int getHashValue() {
		return hashValue;
	}
	/**
	 * @param hashValue The hashValue to set.
	 */
	public void setHashValue(int hashValue) {
		this.hashValue = hashValue;
	}
	/**
	 * @return Returns the newParty.
	 */
	public Party getNewParty() {
		return newParty;
	}
	/**
	 * @param newParty The newParty to set.
	 */
	public void setNewParty(Party newParty) {
		this.newParty = newParty;
	}
	/**
	 * @return Returns the newPriority.
	 */
	public SLAPriority getNewPriority() {
		return newPriority;
	}
	/**
	 * @param newPriority The newPriority to set.
	 */
	public void setNewPriority(SLAPriority newPriority) {
		this.newPriority = newPriority;
	}
	/**
	 * @return Returns the newReqeustType.
	 */
	public SLACategory getNewReqeustType() {
		return newReqeustType;
	}
	/**
	 * @param newReqeustType The newReqeustType to set.
	 */
	public void setNewReqeustType(SLACategory newReqeustType) {
		this.newReqeustType = newReqeustType;
	}
	/**
	 * @return Returns the newUser.
	 */
	public UserLogin getNewUser() {
		return newUser;
	}
	/**
	 * @param newUser The newUser to set.
	 */
	public void setNewUser(UserLogin newUser) {
		this.newUser = newUser;
	}
	/**
	 * @return Returns the oldParty.
	 */
	public Party getOldParty() {
		return oldParty;
	}
	/**
	 * @param oldParty The oldParty to set.
	 */
	public void setOldParty(Party oldParty) {
		this.oldParty = oldParty;
	}
	/**
	 * @return Returns the oldPriority.
	 */
	public SLAPriority getOldPriority() {
		return oldPriority;
	}
	/**
	 * @param oldPriority The oldPriority to set.
	 */
	public void setOldPriority(SLAPriority oldPriority) {
		this.oldPriority = oldPriority;
	}
	/**
	 * @return Returns the oldRequestType.
	 */
	public SLACategory getOldRequestType() {
		return oldRequestType;
	}
	/**
	 * @param oldRequestType The oldRequestType to set.
	 */
	public void setOldRequestType(SLACategory oldRequestType) {
		this.oldRequestType = oldRequestType;
	}
	/**
	 * @return Returns the oldUser.
	 */
	public UserLogin getOldUser() {
		return oldUser;
	}
	/**
	 * @param oldUser The oldUser to set.
	 */
	public void setOldUser(UserLogin oldUser) {
		this.oldUser = oldUser;
	}
	/**
	 * @return Returns the party.
	 */
	public Party getParty() {
		return party;
	}
	/**
	 * @param party The party to set.
	 */
	public void setParty(Party party) {
		this.party = party;
	}
    /**
     * Simple constructor of AbstractCallHistory instances.
     */
    public AbstractCallHistory()
    {
    }

    /**
     * Constructor of AbstractCallHistory instances given a simple primary key.
     * @param callHistoryID
     */
    public AbstractCallHistory(java.lang.Integer id)
    {
        this.setCallHistoryID(id);
    }


    /**
     * Implementation of the equals comparison on the basis of equality of the primary key values.
     * @param rhs
     * @return boolean
     */
    public boolean equals(Object rhs)
    {
        if (rhs == null)
            return false;
        if (! (rhs instanceof CallHistory))
            return false;
        CallHistory that = (CallHistory) rhs;
        if (this.getCallHistoryID() != null && that.getCallHistoryID() != null)
        {
            if (! this.getCallHistoryID().equals(that.getCallHistoryID()))
            {
                return false;
            }
        }
        return true;
    }

    /**
     * Implementation of the hashCode method conforming to the Bloch pattern with
     * the exception of array properties (these are very unlikely primary key types).
     * @return int
     */
    public int hashCode()
    {
        if (this.hashValue == 0)
        {
            int result = 17;
            int cmahIdValue = this.getCallHistoryID() == null ? 0 : this.getCallHistoryID().hashCode();
            result = result * 37 + cmahIdValue;
            this.hashValue = result;
        }
        return this.hashValue;
    }
}
